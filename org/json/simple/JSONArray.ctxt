#BlueJ class context
comment0.target=JSONArray
comment0.text=\r\n\ A\ JSON\ array.\ JSONObject\ supports\ java.util.List\ interface.\r\n\ \r\n\ @author\ FangYidong<fangyidong@yahoo.com.cn>\r\n
comment1.params=
comment1.target=JSONArray()
comment1.text=\r\n\ Constructs\ an\ empty\ JSONArray.\r\n
comment10.params=array\ out
comment10.target=void\ writeJSONString(int[],\ java.io.Writer)
comment11.params=array
comment11.target=java.lang.String\ toJSONString(int[])
comment12.params=array\ out
comment12.target=void\ writeJSONString(long[],\ java.io.Writer)
comment13.params=array
comment13.target=java.lang.String\ toJSONString(long[])
comment14.params=array\ out
comment14.target=void\ writeJSONString(float[],\ java.io.Writer)
comment15.params=array
comment15.target=java.lang.String\ toJSONString(float[])
comment16.params=array\ out
comment16.target=void\ writeJSONString(double[],\ java.io.Writer)
comment17.params=array
comment17.target=java.lang.String\ toJSONString(double[])
comment18.params=array\ out
comment18.target=void\ writeJSONString(boolean[],\ java.io.Writer)
comment19.params=array
comment19.target=java.lang.String\ toJSONString(boolean[])
comment2.params=c
comment2.target=JSONArray(java.util.Collection)
comment2.text=\r\n\ Constructs\ a\ JSONArray\ containing\ the\ elements\ of\ the\ specified\r\n\ collection,\ in\ the\ order\ they\ are\ returned\ by\ the\ collection's\ iterator.\r\n\ \r\n\ @param\ c\ the\ collection\ whose\ elements\ are\ to\ be\ placed\ into\ this\ JSONArray\r\n
comment20.params=array\ out
comment20.target=void\ writeJSONString(char[],\ java.io.Writer)
comment21.params=array
comment21.target=java.lang.String\ toJSONString(char[])
comment22.params=array\ out
comment22.target=void\ writeJSONString(java.lang.Object[],\ java.io.Writer)
comment23.params=array
comment23.target=java.lang.String\ toJSONString(java.lang.Object[])
comment24.params=
comment24.target=java.lang.String\ toJSONString()
comment25.params=
comment25.target=java.lang.String\ toString()
comment25.text=\r\n\ Returns\ a\ string\ representation\ of\ this\ array.\ This\ is\ equivalent\ to\r\n\ calling\ {@link\ JSONArray\#toJSONString()}.\r\n
comment3.params=collection\ out
comment3.target=void\ writeJSONString(java.util.Collection,\ java.io.Writer)
comment3.text=\r\n\ Encode\ a\ list\ into\ JSON\ text\ and\ write\ it\ to\ out.\ \r\n\ If\ this\ list\ is\ also\ a\ JSONStreamAware\ or\ a\ JSONAware,\ JSONStreamAware\ and\ JSONAware\ specific\ behaviours\ will\ be\ ignored\ at\ this\ top\ level.\r\n\ \r\n\ @see\ org.json.simple.JSONValue\#writeJSONString(Object,\ Writer)\r\n\ \r\n\ @param\ collection\r\n\ @param\ out\r\n
comment4.params=out
comment4.target=void\ writeJSONString(java.io.Writer)
comment5.params=collection
comment5.target=java.lang.String\ toJSONString(java.util.Collection)
comment5.text=\r\n\ Convert\ a\ list\ to\ JSON\ text.\ The\ result\ is\ a\ JSON\ array.\ \r\n\ If\ this\ list\ is\ also\ a\ JSONAware,\ JSONAware\ specific\ behaviours\ will\ be\ omitted\ at\ this\ top\ level.\r\n\ \r\n\ @see\ org.json.simple.JSONValue\#toJSONString(Object)\r\n\ \r\n\ @param\ collection\r\n\ @return\ JSON\ text,\ or\ "null"\ if\ list\ is\ null.\r\n
comment6.params=array\ out
comment6.target=void\ writeJSONString(byte[],\ java.io.Writer)
comment7.params=array
comment7.target=java.lang.String\ toJSONString(byte[])
comment8.params=array\ out
comment8.target=void\ writeJSONString(short[],\ java.io.Writer)
comment9.params=array
comment9.target=java.lang.String\ toJSONString(short[])
numComments=26
